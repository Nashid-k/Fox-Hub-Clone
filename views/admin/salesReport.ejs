<%- include('../adminLayouts/header.ejs') %>
<%- include('../adminLayouts/sidenavbar.ejs') %>
<div class="body-wrapper">
  <header class="app-header">
    <nav class="navbar navbar-expand-lg navbar-light">
      <ul class="navbar-nav">
        <li class="nav-item d-block d-xl-none">
          <a class="nav-link sidebartoggler nav-icon-hover" id="headerCollapse" href="javascript:void(0)">
            <i class="ti ti-menu-2"></i>
          </a>
        </li>
        <li class="nav-item">
          <a class="nav-link nav-icon-hover" href="javascript:void(0)">
            <i class="ti ti-bell-ringing"></i>
            <div class="notification bg-primary rounded-circle"></div>
          </a>
        </li>
      </ul>
      <div class="navbar-collapse justify-content-end px-0" id="navbarNav">
        <ul class="navbar-nav flex-row ms-auto align-items-center justify-content-end">
          <a href="https://adminmart.com/product/modernize-free-bootstrap-admin-dashboard/" target="_blank"
            class="btn btn-primary">Download Free</a>
          <li class="nav-item dropdown">
            <a class="nav-link nav-icon-hover" href="javascript:void(0)" id="drop2" data-bs-toggle="dropdown"
              aria-expanded="false">
              <img src="/adminAssets/images/profile/user-1.jpg" alt="" width="35" height="35"
                class="rounded-circle">
            </a>
            <div class="dropdown-menu dropdown-menu-end dropdown-menu-animate-up" aria-labelledby="drop2">
              <div class="message-body">
                <a href="javascript:void(0)" class="d-flex align-items-center gap-2 dropdown-item">
                  <i class="ti ti-user fs-6"></i>
                  <p class="mb-0 fs-3">My Profile</p>
                </a>
                <a href="javascript:void(0)" class="d-flex align-items-center gap-2 dropdown-item">
                  <i class="ti ti-mail fs-6"></i>
                  <p class="mb-0 fs-3">My Account</p>
                </a>
                <a href="javascript:void(0)" class="d-flex align-items-center gap-2 dropdown-item">
                  <i class="ti ti-list-check fs-6"></i>
                  <p class="mb-0 fs-3">My Task</p>
                </a>
                <a href="./authentication-login.html" class="btn btn-outline-primary mx-3 mt-2 d-block">Logout</a>
              </div>
            </div>
          </li>
        </ul>
      </div>
    </nav>
  </header>


  <style>
    body {
      font-family: Arial, sans-serif;
      background-color: #f4f4f9;
      margin: 0;
      padding: 0;
    }
    h2 {
      text-align: center;
      margin-top: 20px;
      color: #333;
    }
    .date-filter-container {
      display: flex;
      justify-content: center;
      align-items: center;
      margin-bottom: 20px;
      background-color: #fff;
      padding: 15px;
      border-radius: 8px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }
    .date-filter-container label {
      margin: 0 10px 0 0;
      color: #333;
      font-weight: bold;
    }
    .date-filter-container input, .date-filter-container select, .date-filter-container button {
      margin-right: 15px;
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
    }
    .date-filter-container button {
      background-color: #0d80b5;
      color: white;
      cursor: pointer;
      border: none;
      padding: 10px 20px;
      transition: background-color 0.3s;
    }
    .date-filter-container button:hover {
      background-color: #1f2282;
    }
    table {
      border-collapse: collapse;
      width: 95%;
      margin: 44px auto;        
      background-color: #fff;
      box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
      border-radius: 8px;
      overflow: hidden;
    }
    th, td {
      padding: 15px;
      text-align: left;
      border-bottom: 1px solid #ddd;
    }
    tr:hover {
      background-color: #f5f5f5;
    }
    th {
      background-color: #141514;
      color: rgb(5, 5, 5);
      cursor: pointer;
      position: relative;
    }
    th::after {
      content: '\25b2';
      position: absolute;
      right: 8px;
      font-size: 0.8em;
    }
    th.desc::after {
      content: '\25bc';
    }
    td {
      color: #333;
    }
    .no-orders {
      text-align: center;
      color: #888;
      margin-top: 20px;
    }


    .container-fluid {
            width: 100%;
            padding: 20px;
            box-sizing: border-box;
        }
        .card {
            padding: 20px;
            border: 1px solid #ccc;
            border-radius: 8px;
            background-color: #fff;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        .date-filter-container {
            margin-bottom: 20px;
        }
        #order-table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }
        #order-table th, #order-table td {
            border: 1px solid #ccc;
            padding: 8px;
            text-align: left;
        }
        #order-table th {
            background-color: #f4f4f4;
            cursor: pointer;
        }
        .report-summary {
            margin-top: 20px;
        }
        .report-summary div {
            margin-bottom: 10px;
        }
        .container-fluid {
      padding: 20px;
    }
    .pagination-container {
      display: flex;
      justify-content: center;
      align-items: center;
      margin-top: 20px;
    }
    .pagination-container button {
      margin: 0 5px;
    }
    .report-summary {
      margin-top: 20px;
      font-weight: bold;
    }
    .download-buttons {
      display: flex;
      justify-content: center;
      margin-top: 20px;
    }
    .download-buttons button {
      margin: 0 10px;
    }
    #order-table th, #order-table td {
      text-align: center;
      vertical-align: middle;
    }
  </style>



<div class="container-fluid">
  <div class="card">
    <h2 class="card-header">Sales Report</h2>
    <div class="card-body">
      <div class="date-filter-container">
        <label for="date-filter">Date Filter:</label>
        <select id="date-filter" class="form-control" style="width: 200px; display: inline-block;" onchange="applyFilterAndReload()">
          <option value="day">Day</option>
          <option value="week">Week</option>
          <option value="month">Month</option>
          <option value="year">Year</option>
          <option value="custom">Custom</option>
        </select>

        <div id="custom-date-inputs" style="display: none;">
          <label for="start-date">Start Date:</label>
          <input type="date" id="start-date" class="form-control" style="display: inline-block; width: auto;">
          <label for="end-date">End Date:</label>
          <input type="date" id="end-date" class="form-control" style="display: inline-block; width: auto;">
        </div>
        <button id="myButton" style="color: #141514;" class="btn btn-primary" onclick="filterByPeriod()">Submit</button>
        
      </div>

      <table id="order-table">
        <thead>
          <tr>
            <th data-column="index">No.</th>
            <th data-column="user.name">Name</th>
            <th data-column="items.productId.name">Product</th>
            <th data-column="items.productPrice">Amount</th>
            <th data-column="totalDiscount">Discount</th>
            <th data-column="items.finalPrice">Final Price</th>
          </tr>
        </thead>
        <tbody>
          <% orders.forEach((order, index) => { %>
          <% order.items.forEach((item, itemIndex) => { %>
          <tr data-date="<%= order.createdAt %>">
            <td><%= index * order.items.length + itemIndex + 1 %></td>
            <td><%= order.user.name %></td>
            <td><%= item.productId.name %></td>
            <td>₹<%= item.productPrice.toFixed(2) %></td>
            <td>₹<%= (item.discount || 0).toFixed(2) %></td>
            <td>₹<%= item.finalPrice.toFixed(2) %></td>
          </tr>
          <% }) %>
          <% }) %>
        </tbody>
      </table>
      

      <div id="no-orders" class="no-orders alert alert-info" style="display: none;">
        No orders found.
      </div>

      <div class="pagination-container">
        <button class="btn btn-secondary" onclick="prevPage()">Previous</button>
        <span id="page-number"></span>
        <button class="btn btn-secondary" onclick="nextPage()">Next</button>
      </div>

      <div class="report-summary">
        <div>Overall Sales Count: <%= orders.length %></div>
        <div>Overall Amount: ₹<%= calculateTotalAmount(orders).toFixed(2) %></div>
        <div>Overall Discount: ₹<%= calculateTotalDiscount(orders).toFixed(2) %></div>
        <div>Overall Profit: ₹<%= (calculateTotalAmount(orders) - calculateTotalDiscount(orders)).toFixed(2) %></div>
      </div>
      <div class="download-buttons">
        <button class="btn btn-success" onclick="downloadPDF()">Download PDF</button>
        <button class="btn btn-success" onclick="downloadExcel()">Download Excel</button>
      </div>
    </div>
  </div>
</div>


</div>


<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.14/jspdf.plugin.autotable.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.0/xlsx.full.min.js"></script>


<script>
  document.getElementById('myButton').addEventListener('click', () => {
    console.log('Button clicked d');
    // Add your debugging code here
  });

  document.getElementById('date-filter').addEventListener('change', () => {
    const customInputs = document.getElementById('custom-date-inputs');
    const filter = document.getElementById('date-filter').value;
    customInputs.style.display = filter === 'custom' ? 'block' : 'none';
  });

  let currentPage = 1;
  const rowsPerPage = 10;

  document.addEventListener('DOMContentLoaded', () => {
    paginateTable(currentPage);
    setupSorting();
  });

  function applyFilterAndReload() {
    const filter = document.getElementById('date-filter').value;
    const url = new URL(window.location.href);
    url.searchParams.set('filter', filter);
    window.history.replaceState({}, '', url);
  }

  function filterByPeriod() {
    const startDate = document.getElementById('start-date').value;
    const endDate = document.getElementById('end-date').value;

    // Construct the query parameters
    const queryParams = `startDate=${startDate}&endDate=${endDate}`;

    // Make an AJAX request to the server
    fetch(`/admin/salesReport/filter?${queryParams}`)
      .then(response => response.json())
      .then(data => {
        // Update the DOM with the new data
        updateTableData(data.orders);
      })
      .catch(error => console.error('Error fetching filtered data:', error));
  }

  function updateTableData(orders) {
    const tbody = document.querySelector('#order-table tbody');
    tbody.innerHTML = ''; // Clear existing rows

    orders.forEach((order, index) => {
      order.items.forEach((item, itemIndex) => {
        const row = document.createElement('tr');
        row.dataset.date = order.createdAt;

        ['No.', 'Name', 'Product', 'Amount', 'Discount', 'Final Price'].forEach((cellText, i) => {
          const cell = document.createElement('td');
          switch (i) {
            case 0:
              cell.textContent = index * order.items.length + itemIndex + 1;
              break;
            case 1:
              cell.textContent = order.user.name;
              break;
            case 2:
              cell.textContent = item.productId.name;
              break;
            case 3:
              cell.textContent = `₹${item.productPrice.toFixed(2)}`;
              break;
            case 4:
              cell.textContent = `₹${(item.discount || 0).toFixed(2)}`;
              break;
            case 5:
              cell.textContent = `₹${item.finalPrice.toFixed(2)}`;
              break;
          }
          row.appendChild(cell);
        });

        tbody.appendChild(row);
      });
    });
  }

  function paginateTable(page) {
    const table = document.getElementById("order-table");
    const rows = Array.from(table.rows).slice(1); // Exclude header row
    const totalPages = Math.ceil(rows.length / rowsPerPage);

    currentPage = Math.min(Math.max(page, 1), totalPages);

    rows.forEach((row, index) => {
      row.style.display = (index >= (currentPage - 1) * rowsPerPage && index < currentPage * rowsPerPage) ? "" : "none";
    });

    document.getElementById('page-number').innerText = `Page ${currentPage} of ${totalPages}`;
  }

  function prevPage() {
    if (currentPage > 1) {
      paginateTable(currentPage - 1);
    }
  }

  function nextPage() {
    const table = document.getElementById("order-table");
    const rows = Array.from(table.rows).slice(1); // Exclude header row
    const totalPages = Math.ceil(rows.length / rowsPerPage);

    if (currentPage < totalPages) {
      paginateTable(currentPage + 1);
    }
  }

  function setupSorting() {
  const headers = document.querySelectorAll('#order-table th[data-column]');
  headers.forEach(header => {
    header.addEventListener('click', () => {
      const column = header.dataset.column;
      if (column) {
        sortTable(column);
      }
    });
  });
}

function sortTable(column) {
  const currentSortBy = new URLSearchParams(window.location.search).get('sortBy');
  const currentSortOrder = new URLSearchParams(window.location.search).get('sortOrder');
  const filter = new URLSearchParams(window.location.search).get('filter');

  let newSortOrder = 'asc';
  if (currentSortBy === column && currentSortOrder === 'asc') {
    newSortOrder = 'desc';
  }

  const url = new URL(window.location.href);
  url.searchParams.set('sortBy', column);
  url.searchParams.set('sortOrder', newSortOrder);
  if (filter) {
    url.searchParams.set('filter', filter);
  }

  window.location.href = url.toString();
}


  function downloadPDF() {
    const { jsPDF } = window.jspdf;
    const doc = new jsPDF();

    const table = document.getElementById('order-table');
    const rows = Array.from(table.rows).slice(1);

    let content = [];
    let totalAmount = 0;
    let totalDiscount = 0;
    let totalFinalPrize = 0;
    let uniqueProducts = new Set();

    rows.forEach(row => {
      if (row.style.display === 'none') return;
      const cells = row.getElementsByTagName('td');
      let rowContent = [];
      for (let j = 0; j < cells.length; j++) {
        rowContent.push(cells[j].innerText);
      }
      content.push(rowContent);
      totalAmount += parseFloat(cells[3].innerText.replace('₹', ''));
      totalDiscount += parseFloat(cells[4].innerText.replace('₹', ''));
      totalFinalPrize += parseFloat(cells[5].innerText.replace('₹', ''));
      uniqueProducts.add(cells[2].innerText); // Use product name for unique count
    });

    doc.text("Email: foxhub@gmail.com", 14, 10);
    doc.text(`Date: ${new Date().toLocaleDateString()}`, 14, 20);

    doc.autoTable({
      head: [['No.', 'Name', 'Product', 'Amount', 'Discount', 'Final Price']],
      body: content
    });

    doc.text(`Overall Sales Count: ${uniqueProducts.size}`, 14, doc.autoTable.previous.finalY + 10);
    doc.text(`Overall Amount: ₹${totalAmount.toFixed(2)}`, 14, doc.autoTable.previous.finalY + 20);
    doc.text(`Overall Discount: ₹${totalDiscount.toFixed(2)}`, 14, doc.autoTable.previous.finalY + 30);
    doc.text(`Overall Profit: ₹${totalFinalPrize.toFixed(2)}`, 14, doc.autoTable.previous.finalY + 40);

    doc.save('sales_report.pdf');
  }

  function downloadExcel() {
    const table = document.getElementById('order-table');
    const ws = XLSX.utils.table_to_sheet(table);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Sales Report');

    XLSX.writeFile(wb, 'sales_report.xlsx');
  }
</script>
  


<%- include('../adminLayouts/footer.ejs') %>
