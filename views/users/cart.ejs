<%- include('../layouts/header.ejs') %>
<%- include('../layouts/navbar.ejs') %>

<style>
  .quantity-change {
    background-color: transparent;
    border: 1px solid #ccc;
    color: #000;
    cursor: pointer;
    font-size: 16px;
    width: 20px;
    height: 20px;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.3s;
  }

  .quantity-change:hover {
    background-color: #bf9c33;
  }

  .text-center2 {
    margin-left: 80%;
  }

  .text-center3 {
    margin-top: -6%;
    margin-left: 60%;
  }

  .remove-item {
    background-color: #cc1d1d;
    border-radius: 7%;
    width: 70%;
  }
</style>

<div class="hero-wrap hero-bread" style="background-image: url('/assets/images/bg_6.jpg');">
  <div class="container">
    <div class="row no-gutters slider-text align-items-center justify-content-center">
      <div class="col-md-9 ftco-animate text-center">
        <p class="breadcrumbs"><span class="mr-2"><a href="/home">Home</a></span> <span>Cart</span></p>
        <h1 class="mb-0 bread">My CART</h1>
      </div>
    </div>
  </div>
</div>

<section class="ftco-section ftco-cart">
  <div class="container">
    <div class="row">
      <div class="col-md-12 ftco-animate">
        <div class="cart-list">
          <table class="table">
            <thead>
              <tr>
                <th>Item Name</th>
                <th>Quantity</th>
                <th>Unit Price</th>
                <th>Item Image</th>
                <th>Total Price</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              <% let total = 0; %>
              <% if (cart.length > 0) { %>
                <% cart.forEach(item => {
                  const itemTotal = item.quantity * item.finalPrice;
                  total += itemTotal;
                %>
                  <tr>
                    <td><%= item.productName %></td>
                    <td>
                      <form class="quantity-form" data-product-id="<%= item.productId._id %>" data-unit-price="<%= item.finalPrice %>" data-available-quantity="<%= item.productId.quantity || 0 %>">
                        <input type="hidden" name="productId" value="<%= item.productId._id %>">
                        <button type="button" class="quantity-change decrease">-</button>
                        <span class="quantity-display"><%= item.quantity %></span>
                        <button type="button" class="quantity-change increase">+</button>
                      </form>
                    </td>
                    <td class="unit-price">
                      <%= item.finalPrice.toFixed(2) %>
                    </td>
                    <td>
                      <img src="/productImage/<%= item.productImage %>" alt="<%= item.productName %>" style="width: 50px; height: 50px;">
                    </td>
                    <td class="item-total">
                      <%= itemTotal.toFixed(2) %>
                    </td>
                    <td>
                      <form action="/cart/remove" method="POST">
                        <input type="hidden" name="productId" value="<%= item.productId._id %>">
                        <button type="submit" class="remove-item">Remove</button>
                      </form>
                    </td>
                  </tr>
                <% }); %>
                <tr>
                  <td colspan="4" align="right"><b>Total</b></td>
                  <td id="cart-total"><%= total.toFixed(2) %></td>
                  <td>&nbsp;</td>
                </tr>
              <% } else { %>
                <tr>
                  <td colspan="6" align="center">No items found in cart</td>
                </tr>
              <% } %>
            </tbody>
          </table>
          <p class="text-center2"><a href="/checkout" class="btn btn-primary py-3 px-4">Proceed to Checkout</a></p>
          <p class="text-center3"><a href="/shop" class="btn btn-primary py-3 px-4">Continue Shopping</a></p>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const quantityForms = document.querySelectorAll(".quantity-form");

    quantityForms.forEach(form => {
      const decreaseButton = form.querySelector(".decrease");
      const increaseButton = form.querySelector(".increase");
      const quantityDisplay = form.querySelector(".quantity-display");
      const totalPriceElement = form.closest('tr').querySelector(".item-total");
      const unitPriceElement = form.closest('tr').querySelector(".unit-price");
      const cartTotalElement = document.getElementById("cart-total");
      const availableQuantity = parseInt(form.dataset.availableQuantity);

      let quantity = parseInt(quantityDisplay.textContent);
      const unitPrice = parseFloat(unitPriceElement.textContent);

      decreaseButton.addEventListener("click", function () {
        if (quantity > 1) {
          quantity--;
          quantityDisplay.textContent = quantity;
          updateTotalPrice(quantity);
          updateCartTotal();
          updateQuantityOnServer(form.dataset.productId, quantity);
        }
      });

      increaseButton.addEventListener("click", function () {
        if (quantity < availableQuantity) {
          quantity++;
          quantityDisplay.textContent = quantity;
          updateTotalPrice(quantity);
          updateCartTotal();
          updateQuantityOnServer(form.dataset.productId, quantity);
        } else {
          showToast('Cannot add more than available quantity.', '#FF0000');
        }
      });

      function updateTotalPrice(quantity) {
        const totalPrice = unitPrice * quantity;
        totalPriceElement.textContent = totalPrice.toFixed(2);
      }

      function updateCartTotal() {
        const cartItems = document.querySelectorAll(".item-total");
        let cartTotal = 0;
        cartItems.forEach(item => {
          cartTotal += parseFloat(item.textContent);
        });
        cartTotalElement.textContent = cartTotal.toFixed(2);
      }

      function updateQuantityOnServer(productId, quantity) {
        fetch('/user/cart/update-quantity', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            productId: productId,
            quantity: quantity
          })
        })
        .then(response => response.json())
        .then(data => {
          if (!data.success) {
            showToast('Failed to update quantity on server: ' + data.message, '#d90000');
          }
        })
        .catch(error => {
          console.error('Error updating quantity on server:', error);
          showToast('Error updating quantity on server.', '#d90000');
        });
      }

      function showToast(message, backgroundColor) {
        const toast = document.createElement('div');
        toast.className = 'toast';
        toast.style.backgroundColor = backgroundColor;
        toast.innerText = message;
        document.body.appendChild(toast);
        setTimeout(() => {
          toast.classList.add('show');
        }, 100);
        setTimeout(() => {
          toast.classList.remove('show');
          document.body.removeChild(toast);
        }, 3000);
      }
    });
  });

  document.addEventListener("DOMContentLoaded", function () {
    const removeButtons = document.querySelectorAll(".remove-item");

    removeButtons.forEach(button => {
      button.addEventListener("click", function (event) {
        event.preventDefault();
        const form = this.closest("form");
        const productId = form.querySelector('input[name="productId"]').value;

        fetch('/cart/remove', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ productId })
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            showToast('Item removed from cart', '#4CAF50');
            form.closest('tr').remove();
            updateCartTotal();
          } else {
            showToast('Failed to remove item from cart: ' + data.error, '#FF0000');
          }
        })
        .catch(error => {
          console.error('Error removing item from cart:', error);
          showToast('Error removing item from cart', '#FF0000');
        });
      });
    });

    function updateCartTotal() {
      const cartItems = document.querySelectorAll(".item-total");
      let cartTotal = 0;
      cartItems.forEach(item => {
        cartTotal += parseFloat(item.textContent);
      });
      document.getElementById("cart-total").textContent = cartTotal.toFixed(2);
    }

    function showToast(message, backgroundColor) {
      const toast = document.createElement('div');
      toast.className = 'toast';
      toast.style.backgroundColor = backgroundColor;
      toast.innerText = message;
      document.body.appendChild(toast);
      setTimeout(() => {
        toast.classList.add('show');
      }, 100);
      setTimeout(() => {
        toast.classList.remove('show');
        document.body.removeChild(toast);
      }, 3000);
    }
  });
</script>

<style>
  .toast {
    visibility: hidden;
    min-width: 300px;
    max-width: 400px;
    margin-left: -150px;
    background-color: #444;
    color: #fff;
    text-align: center;
    border-radius: 8px;
    padding: 16px;
    position: fixed;
    z-index: 1000;
    right: 20px;
    top: 20px;
    font-size: 16px;
    opacity: 0;
    transition: opacity 0.5s ease-in-out, transform 0.5s ease-in-out;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  }

  .toast.show {
    visibility: visible;
    opacity: 1;
    transform: translateY(20px);
  }
</style>

<%- include('../layouts/footer.ejs') %>
